bot code:

1) Scan all* possible moves
2) assign each move a value
3) 

calc all computer moves + all player moves for B-set (2 moves ahead)
find the highest value board from all possible B-2 boards


finds the highest value move for B-1.0 (1.0 meaning board instance 1, computers move) for each comparison of


looks at all possible situations for board2. Finds best possible in comparisons of 2. Finds worst possible from results of best possible, the worst move that the player could make. Finds best possible move for board1.


Scan X moves ahead (x=2)
1) scan current original board for all move validations
2) make byte array that stores position of piece and place it moves to, i.e. the move
3) for each piece on the board, run its move validation, return list, for each item on list/for each move each piece can take: 1) record position of piece 2) record position of where its gonna move it 3) add the byte array (move) to list.
At this point we have a list of all the possible moves that can be taken for the original board.
this is all the moves the bot can take
now lets work out all the moves the player could take in response
4) generate new board with that move.
    steps to generating new board
    4.1) create a new blank board using initboard()
    4.2) Manually do move because I can't repurpose the normal code
5) Run move validation for newly generated board
6) append new each now move to its first move to make a full two moves
7) add the full move to main list
now we have every entire move ahead, one move for the bot and then one for the player
however, they have no assigned values yet, so lets make a assign value function and basically copy our taking piece code
8) assign values to moves
    steps to assigning moves
    8.1) take a byte array as an input, that is our original move
    8.2) run logic to find out of a piece will be taken or not
    8.3) if it isn't occupied, assign a value of null
    8.4) if it is occupied, find out what the value piece its taking is
    8.5) assign the move that pieces value



NOTE
Currently storing moves very inefficiently
possibly change previous moves to an index number instead


first iteration of scanning only stores one move
next iteration will store 2 moves 
when h = 0, 2 moves stored
each h++, +1 move chain


move[3] is the previous moves if length > 4
final position is the value

notes: value position is inconsistent and fucked up